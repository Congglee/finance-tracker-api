// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  password            String
  emailVerifyToken    String?           @map("email_verify_token")
  forgotPasswordToken String?           @map("forgot_password_token")
  verify              UserVerifyStatus? @default(Unverified)
  avatar              String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refreshToken RefreshToken[]
  userSetting  UserSetting?
  account      Account[]
  category     Category[]
  budget       Budget[]

  @@index([email, password], name: "email_password_idx")
  @@map("users")
}

model RefreshToken {
  id    String   @id @default(uuid())
  token String
  iat   DateTime // Need to convert Epoch time to Date
  exp   DateTime // Need to convert Epoch time to Date

  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token], name: "refresh_token_idx")
  @@map("refresh_tokens")
}

model UserSetting {
  userId   String @id @unique @map("user_id")
  currency String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Account {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transaction Transaction[]

  @@map("accounts")
}

model Category {
  id   String  @id @default(uuid())
  name String
  icon String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  transaction Transaction[]
  budget      Budget[]

  @@map("categories")
}

model Transaction {
  id     String   @id @default(uuid())
  name   String?
  amount Int
  payee  String
  notes  String?
  date   DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  accountId String  @map("account_id")
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Budget {
  id        String    @id @default(uuid())
  name      String
  amount    Int
  spent     Int
  startDate DateTime? @map("start_date")
  endDate   DateTime? @map("end_date")

  // TODO: Feature to be implemented in the future
  // periodType            BudgetPeriodType @default(Daily) @map("period_type")
  // recurring             Boolean          @default(false)
  // notificationThreshold Int?             @map("notification_threshold")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

enum UserVerifyStatus {
  Unverified
  Verified
}

enum BudgetPeriodType {
  Daily
  Weekly
  Monthly
  Yearly
}
